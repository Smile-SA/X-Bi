{"version":3,"sources":["webpack:///./src/components/forms/url/add/add.js"],"names":["apiInfo","uiConfigurations","name","components","props","data","form","model","showForm","errors","message","controls","computed","lookModel","this","methods","getForm","$modal","show","structureType","cancel","$formulate","reset","hide","deleteDynamicInput","configurationsController","input","submitForm","dataType","$emit","general","url","then","r","submit","refreshFunction","tabDel","Object","keys","map","key","isDynamic","push","length","changeForm","dynamicFields","watch"],"mappings":"kHAAA,+CAGA,MAAMA,EAAUC,aAED,cACXC,KAAM,MACNC,WAAY,GACZC,MAAO,CAAC,gBAAiB,kBAAmB,KAAM,OAClDC,OACI,MAAO,CACHC,KAAM,GACNC,MAAO,GACPC,UAAS,EACTC,OAAQ,GACRC,QAAS,GACTC,SAAU,KAGlBC,SAAU,CACNC,YACI,OAAOC,KAAKP,QAIpBQ,QAAS,CACL,aACID,KAAKL,OAAS,GACdK,KAAKJ,QAAU,GACfI,KAAKR,WAAaQ,KAAKE,UACvBF,KAAKN,UAAW,QACVM,KAAKG,OAAOC,KAAK,WAAaJ,KAAKK,gBAE7CC,SACIN,KAAKL,OAAS,GACdK,KAAKJ,QAAU,GACfI,KAAKO,WAAWC,MAAM,WAAaR,KAAKK,eACxCL,KAAKG,OAAOM,KAAK,WAAaT,KAAKK,eACnCL,KAAKN,UAAW,EAChBM,KAAKU,sBAET,gBACI,aAAaC,aAAiCX,KAAKK,gBAEvD,gBAAgBO,GACZ,aAAaD,sBAA0CC,EAAOZ,KAAKP,QAEvEoB,aAC6B,WAArB3B,EAAQ4B,UACRd,KAAKe,MAAM,YAAaf,KAAKP,OAC7BO,KAAKM,WAGLN,KAAKL,OAAS,GACVK,KAAKJ,QAAU,GAEfoB,gBAAmBhB,KAAKiB,IAAKjB,KAAKP,OAAOyB,KAAMC,IACvCA,EAAExB,OACFK,KAAKL,OAAOyB,QAAS,GAErBpB,KAAKU,qBACLV,KAAKO,WAAWC,MAAM,WAAaR,KAAKK,eACxCL,KAAKL,OAAOyB,QAAS,GAEzBpB,KAAKqB,kBACLrB,KAAKJ,QAAUuB,EAAEvB,YAIjCc,qBACI,IAAIY,EAAS,GACbC,OAAOC,KAAKxB,KAAKR,MAAMiC,IAAKC,IACpB1B,KAAKR,KAAKkC,GAAKC,YAA0C,IAA7B3B,KAAKR,KAAKkC,GAAKC,WAC3CL,EAAOM,KAAKF,KAGpB1B,KAAKR,KAAKqC,OAAS7B,KAAKR,KAAKqC,OAASP,EAAOO,QAEjDC,WAAWlB,GACHA,EAAMmB,gBACN/B,KAAKU,qBACLC,mBAAuCX,KAAKR,KAAMQ,KAAKP,UAInEuC,MAAO,CACHjC,YACIY,sBAA0CX,KAAKR,KAAMQ,KAAKP,SAGlE","file":"js/chunk-2d0cc2f3.ff4b8a22.js","sourcesContent":["import * as configurationsController from \"../../../../controller/configurationsController\";\nimport * as general from \"../../../../controller/genaralController\";\nimport * as uiConfigurations from \"@/uiConfigurations.json\"\nconst apiInfo = uiConfigurations.apiInfo;\n\nexport default {\n    name: 'add',\n    components: {},\n    props: ['structureType', 'refreshFunction', 'id', 'url'],\n    data() {\n        return {\n            form: [],\n            model: {},\n            showForm:false,\n            errors: {},\n            message: '',\n            controls: {},\n        }\n    },\n    computed: {\n        lookModel() {\n            return this.model\n        }\n    },\n\n    methods: {\n        async show() {\n            this.errors = {};\n            this.message = '';\n            this.form = await this.getForm();\n            this.showForm = true\n            await this.$modal.show('view-add' + this.structureType);\n        },\n        cancel() {\n            this.errors = {}\n            this.message = ''\n            this.$formulate.reset('add-form' + this.structureType)\n            this.$modal.hide('view-add' + this.structureType);\n            this.showForm = false\n            this.deleteDynamicInput();\n        },\n        async getForm() {\n            return await configurationsController.getForm(this.structureType);\n        },\n        async showInput(input) {\n            return await configurationsController.showInputInModel(input, this.model);\n        },\n        submitForm() {\n            if (apiInfo.dataType === 'static') {\n                this.$emit('itemAdded', this.model);\n                this.cancel();\n            }\n            else {\n                this.errors = {},\n                    this.message = '',\n                    // eslint-disable-next-line no-unused-vars\n                    general.generalAdd(this.url, this.model).then((r) => {\n                        if (r.errors) {\n                            this.errors.submit = true;\n                        } else {\n                            this.deleteDynamicInput();\n                            this.$formulate.reset('add-form' + this.structureType);\n                            this.errors.submit = false;\n                        }\n                        this.refreshFunction();\n                        this.message = r.message;\n                    });\n            }\n        },\n        deleteDynamicInput() {\n            let tabDel = [];\n            Object.keys(this.form).map((key) => {\n                if (this.form[key].isDynamic && this.form[key].isDynamic === true) {\n                    tabDel.push(key)\n                }\n            })\n            this.form.length = this.form.length - tabDel.length\n        },\n        changeForm(input) {\n            if (input.dynamicFields) {\n                this.deleteDynamicInput();\n                configurationsController.dynamicInputs(this.form, this.model);\n            }\n        }\n    },\n    watch: {\n        lookModel() {\n            configurationsController.updateValidation(this.form, this.model);\n        }\n    },\n    async beforeMount() {\n    }\n}\n\n\n"],"sourceRoot":""}