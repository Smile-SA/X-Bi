{"version":3,"sources":["webpack:///./src/components/forms/session/preview/preview.js"],"names":["name","components","apexcharts","VueApexCharts","props","data","model","options","shows","chart","card","computed","beforeMount","methods","this","getModel","$modal","show","structureType","modelId","drawChart","hide","configurationsController","viewId","Object","keys","length","chartController","series","height","is_monitoring","includes","type","labels","$refs","updateOptions","push","Math","floor","random","updateSeries","setInterval","async","map","item","Date","now","step"],"mappings":"kHAAA,wDAKe,cACXA,KAAM,UACNC,WAAY,CAACC,WAAYC,KACzBC,MAAO,CAAC,UAAW,gBAAiB,kBAAmB,UACvDC,OACI,MAAO,CACHC,MAAO,GACPC,QAAS,GACTC,MAAO,CACHC,OAAO,EACPC,MAAM,KAIlBC,SAAU,GACVC,gBAGAC,QAAS,CACL,mBACUC,KAAKC,iBACLD,KAAKE,OAAOC,KAAK,iBAAmBH,KAAKI,cAAgBJ,KAAKK,SACzC,UAAvBL,KAAKI,cACLJ,KAAKM,YAELN,KAAKN,MAAME,MAAO,GAG1BW,OACIP,KAAKE,OAAOK,KAAK,iBAAmBP,KAAKI,cAAgBJ,KAAKK,UAGlEJ,WACI,IAAIV,EAAOiB,cAAkCR,KAAKI,cAAeJ,KAAKS,OAAQT,KAAKK,SAC/EK,OAAOC,KAAKpB,GAAMqB,OAAS,IAC3BZ,KAAKR,MAAQD,IAGrBe,YAcI,GAbAN,KAAKN,MAAMC,OAAQ,EACnBK,KAAKP,QAAUoB,kBAA6Bb,KAAKR,OACjDQ,KAAKP,QAAQqB,OAAS,CAClB,CACI5B,KAAM,UACNK,KAAM,IAEV,CACIL,KAAM,UACNK,KAAM,KAGdS,KAAKP,QAAQE,MAAMoB,OAAS,KACK,IAA7Bf,KAAKR,MAAMwB,cAAwB,CACnC,IAAIF,EAAS,GACT,CAAC,YAAa,QAAS,YAAa,SAASG,SAASjB,KAAKR,MAAM0B,OACjElB,KAAKP,QAAU,CACXE,MAAO,CACHuB,KAAMlB,KAAKR,MAAM0B,MAErBC,OAAQ,CAAC,SAAU,SAAU,SAAU,WAE3CnB,KAAKoB,MAAM,SAAWpB,KAAKI,cAAgBJ,KAAKK,SAASgB,cAAcrB,KAAKP,SAC5EqB,EAAOQ,KAAKC,KAAKC,MAAM,EAAAD,KAAKE,SAAuB,KACnDzB,KAAKP,QAAQqB,OAASA,EACtBd,KAAKoB,MAAM,SAAWpB,KAAKI,cAAgBJ,KAAKK,SAASqB,aAAaZ,IAEtEa,YAAYC,gBACFlB,OAAOC,KAAKX,KAAKP,QAAQqB,QAAQe,IAAKC,IACpC9B,KAAKP,QAAQqB,OAAOgB,GAAMvC,KAAK+B,KAAK,CAACS,KAAKC,MAAOT,KAAKC,MAAM,EAAAD,KAAKE,SAAuB,OACxFzB,KAAKoB,MAAM,SAAWpB,KAAKI,cAAgBJ,KAAKK,SAASqB,aAAa1B,KAAKP,QAAQqB,WAG5F,SAIH,CAAC,YAAa,QAAS,YAAa,SAASG,SAASjB,KAAKR,MAAM0B,OACjElB,KAAKP,QAAU,CACXE,MAAO,CACHuB,KAAMlB,KAAKR,MAAM0B,MAErBC,OAAQ,CAAC,SAAU,SAAU,SAAU,WAE3CnB,KAAKP,QAAQqB,OAAS,CAACS,KAAKC,MAAM,EAAAD,KAAKE,SAAuB,IAAKF,KAAKC,MAAM,EAAAD,KAAKE,SAAuB,IAAKF,KAAKC,MAAM,EAAAD,KAAKE,SAAuB,IAAKF,KAAKC,MAAM,EAAAD,KAAKE,SAAuB,MAElMf,OAAOC,KAAKX,KAAKP,QAAQqB,QAAQe,IAAKC,IAClC,IAAK,IAAIG,EAAO,EAAGA,GAAQ,EAAGA,IAC1BjC,KAAKP,QAAQqB,OAAOgB,GAAMvC,KAAK+B,KAAK,CAACS,KAAKC,MAAgB,GAAPC,EAAY,GAAK,GAAK,IAAOV,KAAKC,MAAM,EAAAD,KAAKE,SAAuB,QAKvI,OAAO","file":"js/chunk-2d0a4f05.8ae5f8ac.js","sourcesContent":["import * as configurationsController from \"../../../../controller/configurationsController\";\nimport * as chartController from \"../../../../controller/chartController\";\n\nimport VueApexCharts from 'vue-apexcharts'\n\nexport default {\n    name: 'preview',\n    components: {apexcharts: VueApexCharts,},\n    props: ['modelId', 'structureType', 'refreshFunction', 'viewId'],\n    data() {\n        return {\n            model: {},\n            options: {},\n            shows: {\n                chart: false,\n                card: false,\n            }\n        }\n    },\n    computed: {},\n    beforeMount() {\n\n    },\n    methods: {\n        async show() {\n            await this.getModel();\n            await this.$modal.show('preview-modal-' + this.structureType + this.modelId);\n            if (this.structureType === 'chart') {\n                this.drawChart();\n            } else {\n                this.shows.card = true;\n            }\n        },\n        hide() {\n            this.$modal.hide('preview-modal-' + this.structureType + this.modelId);\n        },\n\n        getModel() {\n            let data = configurationsController.getModel(this.structureType, this.viewId, this.modelId);\n            if (Object.keys(data).length > 0) {\n                this.model = data;\n            }\n        },\n        drawChart() {\n            this.shows.chart = true;\n            this.options = chartController.createOption(this.model)\n            this.options.series = [\n                {\n                    name: 'series1',\n                    data: []\n                },\n                {\n                    name: 'series2',\n                    data: []\n                }\n            ]\n            this.options.chart.height = 400\n            if (this.model.is_monitoring === true) {\n                let series = []\n                if ([\"polarArea\", \"radar\", \"radialBar\", \"donut\"].includes(this.model.type)) {\n                    this.options = {\n                        chart: {\n                            type: this.model.type\n                        },\n                        labels: [\"Team A\", \"Team B\", \"Team C\", \"Team D\"],\n                    }\n                    this.$refs['chart-' + this.structureType + this.modelId].updateOptions(this.options)\n                    series.push(Math.floor(Math.random() * (37 - 30) + 30));\n                    this.options.series = series;\n                    this.$refs['chart-' + this.structureType + this.modelId].updateSeries(series)\n                } else {\n                    setInterval(async () => {\n                        await Object.keys(this.options.series).map((item) => {\n                            if (this.options.series[item].data.push([Date.now(), Math.floor(Math.random() * (37 - 30) + 30)])) {\n                                this.$refs['chart-' + this.structureType + this.modelId].updateSeries(this.options.series)\n                            }\n                        });\n                    }, 1000);\n\n                }\n            } else {\n                if ([\"polarArea\", \"radar\", \"radialBar\", \"donut\"].includes(this.model.type)) {\n                    this.options = {\n                        chart: {\n                            type: this.model.type\n                        },\n                        labels: [\"Team A\", \"Team B\", \"Team C\", \"Team D\"],\n                    }\n                    this.options.series = [Math.floor(Math.random() * (37 - 30) + 30), Math.floor(Math.random() * (37 - 30) + 30), Math.floor(Math.random() * (37 - 30) + 30), Math.floor(Math.random() * (37 - 30) + 30)]\n                } else {\n                    Object.keys(this.options.series).map((item) => {\n                        for (let step = 0; step <= 4; step++) {\n                            this.options.series[item].data.push([Date.now() - (step * 24 * 60 * 60 * 1000), Math.floor(Math.random() * (37 - 30) + 30)])\n                        }\n                    });\n                }\n            }\n            return true\n        }\n    }\n}\n\n\n"],"sourceRoot":""}