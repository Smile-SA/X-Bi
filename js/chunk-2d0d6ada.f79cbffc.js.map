{"version":3,"sources":["webpack:///./src/components/layout/container/container.js"],"names":["name","components","SideMenu","HeaderLayout","footerLayout","props","data","to","Date","toISOString","from","setDate","getDate","classes","fixed_layout","hide_logo","error","xBiInfo","configurationsController","user","JSON","parse","window","sessionStorage","getItem","isActive","show","menus","footer","madeBy","for","site","url","blog","sidebarRendered","computed","compDisplayName","this","$route","matched","displayName","compEmail","meta","email","methods","a","s","Object","keys","map","item","children","id","subItem","push","changeloading","$store","commit","handleSideMenuRendered","getMenus","sunMenu"],"mappings":"gHAAA,uBAGe,cACXA,KAAM,YACNC,WAAY,CACRC,SAAUA,IAAM,qFAChBC,aAAcA,IAAM,qFACpBC,aAAcA,IAAM,iDAExBC,MAAO,CAAC,cAAe,SACvBC,KAAM,WACF,MAAO,CACHC,IAAI,IAAIC,MAAOC,cACfC,KAAM,IAAIF,MAAK,IAAIA,MAAOG,SAAQ,IAAIH,MAAOI,UAAY,IAAIH,cAC7DI,QAAS,CACLC,cAAc,EACdC,WAAW,GAEfC,MAAO,GACPC,QAASC,kBACTC,KAAMC,KAAKC,MAAMC,OAAOC,eAAeC,QAAQ,SAC/CC,SAAU,GACVC,KAAM,GACNC,MAAO,KACPC,OAAQ,CACJC,OAAO,YACPC,IAAM,oCACNC,KAAM,CACF/B,KAAM,QACNgC,IAAK,yBAETC,KAAM,CACFjC,KAAM,OACNgC,IAAK,8BAGbE,iBAAiB,IAGzBC,SAAU,CACNC,gBAAiB,WACb,OAAOC,KAAKC,OAAOC,QAAQ,IAAMF,KAAKC,OAAOC,QAAQ,GAAGvC,KAAOqC,KAAKC,OAAOC,QAAQ,GAAGvC,KAAOqC,KAAKG,aAEtGC,UAAW,WACP,OAAOJ,KAAKC,OAAOC,QAAQ,IAAMF,KAAKC,OAAOC,QAAQ,GAAGG,KAAKC,MAAQN,KAAKC,OAAOC,QAAQ,GAAGG,KAAKC,MAAQN,KAAKM,QAGtHC,QAAS,CACL,iBACIP,KAAKV,YAAcT,iBAEvB,gBACI,IAAI2B,EAAI,GAAIC,EAAI,SACVC,OAAOC,KAAKX,KAAKV,OAAOsB,IAAKC,IAC3Bb,KAAKV,MAAMuB,GAAMC,WACjBN,EAAER,KAAKV,MAAMuB,GAAME,KAAM,EACzBN,EAAET,KAAKV,MAAMuB,GAAME,IAAM,GACzBL,OAAOC,KAAKX,KAAKV,MAAMuB,GAAMC,UAAUF,IAAKI,IACxCP,EAAET,KAAKV,MAAMuB,GAAME,IAAIE,KAAKjB,KAAKV,MAAMuB,GAAMC,SAASE,GAASrD,WAI3EqC,KAAKZ,SAAWoB,EAChBR,KAAKX,KAAOoB,GAEhBS,gBACIlB,KAAKmB,OAAOC,OAAO,qBAEvBC,yBACIrB,KAAKH,iBAAkB,IAI/B,0BACUG,KAAKsB,iBACLtB,KAAKuB","file":"js/chunk-2d0d6ada.f79cbffc.js","sourcesContent":["import * as configurationsController from \"../../../controller/configurationsController.js\";\n\n\nexport default {\n    name: 'container',\n    components: {\n        SideMenu: () => import('../menu/index.vue'),\n        HeaderLayout: () => import('../header/index.vue'),\n        footerLayout: () => import('../footerLayout/index.vue'),\n    },\n    props: ['displayName', 'email'],\n    data: function () {\n        return {\n            to: new Date().toISOString(),\n            from: new Date(new Date().setDate(new Date().getDate() - 3)).toISOString(),\n            classes: {\n                fixed_layout: false,\n                hide_logo: false\n            },\n            error: '',\n            xBiInfo: configurationsController.getXBiInfo(),\n            user: JSON.parse(window.sessionStorage.getItem('user')),\n            isActive: {},\n            show: {},\n            menus: null,\n            footer: {\n                madeBy:\"Smile R&D\",\n                for : \"a better dashboards configuration\",\n                site: {\n                    name: 'SMILE',\n                    url: 'https://www.smile.fr/'\n                },\n                blog: {\n                    name: 'BLOG',\n                    url: 'https://blog.smile.eu/fr/'\n                }\n            },\n            sidebarRendered: false\n        }\n    },\n    computed: {\n        compDisplayName: function () {\n            return this.$route.matched[0] && this.$route.matched[0].name ? this.$route.matched[0].name : this.displayName;\n        },\n        compEmail: function () {\n            return this.$route.matched[0] && this.$route.matched[0].meta.email ? this.$route.matched[0].meta.email : this.email;\n        }\n    },\n    methods: {\n        async getMenus() {\n            this.menus = await configurationsController.getMenus();\n        },\n        async sunMenu() {\n            let a = {}, s = {};\n            await Object.keys(this.menus).map((item) => {\n                if (this.menus[item].children) {\n                    a[this.menus[item].id] = false;\n                    s[this.menus[item].id] = []\n                    Object.keys(this.menus[item].children).map((subItem) => {\n                        s[this.menus[item].id].push(this.menus[item].children[subItem].name);\n                    });\n                }\n            });\n            this.isActive = a;\n            this.show = s;\n        },\n        changeloading() {\n            this.$store.commit('TOGGLE_SEARCHING')\n        },\n        handleSideMenuRendered() {\n            this.sidebarRendered = true;\n        }\n\n    },\n    async beforeMount() {\n        await this.getMenus();\n        await this.sunMenu();\n    }\n}\n"],"sourceRoot":""}