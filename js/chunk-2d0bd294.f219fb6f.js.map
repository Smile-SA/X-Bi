{"version":3,"sources":["webpack:///./src/views/dynamic/dynamic.js"],"names":["data","group","groupOptions","queryData","dynamicDataSelectId","queryLink","additionalUrl","to","from","date","active","hover","apiInfo","undefined","dynamicData","select","models","styles","structure","card","chart","methods","showDatePicker","this","showGroup","input","id","target","value","mode","dataType","setDate","setModelsData","configurationsController","event","getStructureModelsData","r","$route","name","errors","total","results","todayFunction","n","Date","startToday","getFullYear","getMonth","getDate","endToday","start","end","setDefaultDate","jour","month","year","e","a","UTC","hasDynamicSelect","Object","keys","length","map","key","type","query","generalController","then","beforeMount","getDynamicSelectData","general","watch"],"mappings":"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","file":"js/chunk-2d0bd294.f219fb6f.js","sourcesContent":["import * as configurationsController from \"../../controller/configurationsController\";\nimport * as generalController from \"../../controller/generalController\";\nimport * as general from \"../../controller/generalController\";\n\n\nexport default {\n    data() {\n        return {\n            group: 'hour',\n            groupOptions: ['hour', 'day', 'month', 'year'],\n            queryData: {},\n            dynamicDataSelectId: '',\n            queryLink: '',\n            additionalUrl: '',\n            to: null,\n            from: null,\n            date: null,\n            active: null,\n            hover: true,\n            apiInfo: undefined,\n            dynamicData: [],\n            select: {\n                models: {},\n                styles: {}\n            },\n            structure: {\n                card: {\n                    models: {},\n                    styles: {}\n                },\n                chart: {\n                    models: {},\n                    styles: {}\n                }\n            }\n        }\n    },\n    methods: {\n        showDatePicker() {\n            return this.active !== null\n        },\n        showGroup() {\n            return this.date !== null && this.active !== null\n        },\n        // eslint-disable-next-line no-unused-vars\n        async setDynamicDataSelect(input, id) {\n            this.active = input.target.value;\n            if (this.apiInfo.mode === \"ro\") {\n                this.additionalUrl = id + '/' + this.active;\n            } else {\n                this.additionalUrl = \"\"\n                this.queryData[id] = this.active;\n            }\n            if (this.apiInfo.dataType === 'static') {\n                this.additionalUrl = \"/X-Bi/mockData/\" + this.additionalUrl;\n            }\n            this.setDate(this.date);\n        },\n        async setDate(date) {\n            if (date) {\n                this.date = date;\n                await this.setModelsData();\n                await configurationsController.refreshDate(this.date, this);\n            }\n        },\n        async setGroup(event) {\n            this.group = event.target.value;\n            this.setDate(this.date)\n        },\n        setModelsData() {\n            this.structure.card = {\n                models: {},\n                styles: {}\n            }\n            this.structure.chart = {\n                models: {},\n                styles: {}\n            }\n        },\n        getStructureModelsData() {\n            let r = configurationsController.getSelectModels(this.$route.name)\n            if (r.data != null && r.data.errors !== true) {\n                if (r.data.total > 0) {\n                    this.select.models = r.data.results;\n                }\n            } else {\n                this.select.models = {};\n                this.select.styles = {};\n            }\n        },\n        todayFunction() {\n            const n = new Date()\n            const startToday = new Date(n.getFullYear(), n.getMonth(), n.getDate() - 1, 0, 0)\n            const endToday = new Date(n.getFullYear(), n.getMonth(), n.getDate() + 0, 23, 59)\n            return {\n                start: startToday,\n                end: endToday\n            }\n        },\n        setDefaultDate(jour, month, year) {\n            var e = new Date, n, a = new Date(Date.UTC(e.getFullYear(), e.getMonth(), e.getDate()));\n            if (jour > 0) {\n                n = new Date(Date.UTC(e.getFullYear(), e.getMonth(), e.getDate() - jour))\n            }\n            if (month > 0) {\n                n = new Date(Date.UTC(e.getFullYear(), e.getMonth() - month, e.getDate()))\n            }\n            if (year > 0) {\n                n = new Date(Date.UTC(e.getFullYear() - year, e.getMonth(), e.getDate()))\n            }\n            return {start: n, end: a}\n        },\n        async getDynamicSelectData() {\n            this.active = null;\n            let hasDynamicSelect = false\n            this.select = {}\n            await this.getStructureModelsData();\n            if (this.select.models != undefined && Object.keys(this.select.models).length > 0) {\n                await Object.keys(this.select.models).map((key) => {\n                    if (this.select.models[key].type === 'dynamic') {\n                        hasDynamicSelect = true;\n                        this.queryLink = this.select.models[key].query;\n                        generalController.getJsonData(this.select.models[key]).then((r) => {\n                            if (r.total > 0) {\n                                this.dynamicData = r.results\n                            } else {\n                                this.dynamicData = []\n                            }\n                        })\n                    }\n                })\n            }\n            if (!hasDynamicSelect) {\n                this.active = true;\n            }\n        },\n    },\n    beforeMount() {\n        this.date = this.to = this.from = this.active = null\n        this.queryData = {}\n        this.dynamicData = []\n        this.hover = true, this.dynamicDataSelectId = this.queryLink = this.additionalUrl = ''\n        this.select = {\n            models: {},\n            styles: {}\n        }\n        this.structure = {\n            card: {\n                models: {},\n                styles: {}\n            },\n            chart: {\n                models: {},\n                styles: {}\n            }\n        }\n        this.apiInfo = configurationsController.getApiInfo()\n        this.setModelsData()\n        this.getDynamicSelectData()\n        general.titleBoxRender(this)\n        if (this.$route.name === 'Overall') {\n            this.active = '';\n            this.date = this.todayFunction()\n            this.setDate(this.date);\n        }\n    },\n    watch: {\n        $route() {\n            this.date = this.to = this.from = this.active = null\n            this.queryData = {}\n            this.dynamicData = []\n            this.hover = true, this.dynamicDataSelectId = this.queryLink = this.additionalUrl = ''\n            this.select = {\n                models: {},\n                styles: {}\n            }\n            this.structure = {\n                card: {\n                    models: {},\n                    styles: {}\n                },\n                chart: {\n                    models: {},\n                    styles: {}\n                }\n            }\n            this.apiInfo = configurationsController.getApiInfo()\n            general.titleBoxRender(this)\n            this.getDynamicSelectData();\n            this.setModelsData();\n            if (this.$route.name === 'Overall') {\n                this.active = '';\n                this.date = this.todayFunction()\n                this.setDate(this.date);\n            }\n        }\n    },\n}\n\n\n"],"sourceRoot":""}